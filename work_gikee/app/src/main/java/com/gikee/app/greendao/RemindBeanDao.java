package com.gikee.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMIND_BEAN".
*/
public class RemindBeanDao extends AbstractDao<RemindBean, Long> {

    public static final String TABLENAME = "REMIND_BEAN";

    /**
     * Properties of entity RemindBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Title_en = new Property(2, String.class, "title_en", false, "TITLE_EN");
        public final static Property Time = new Property(3, String.class, "time", false, "TIME");
        public final static Property From = new Property(4, String.class, "from", false, "FROM");
        public final static Property Context = new Property(5, String.class, "context", false, "CONTEXT");
        public final static Property Context_en = new Property(6, String.class, "context_en", false, "CONTEXT_EN");
        public final static Property IsHot = new Property(7, boolean.class, "isHot", false, "IS_HOT");
    }


    public RemindBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RemindBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMIND_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TITLE_EN\" TEXT," + // 2: title_en
                "\"TIME\" TEXT," + // 3: time
                "\"FROM\" TEXT," + // 4: from
                "\"CONTEXT\" TEXT," + // 5: context
                "\"CONTEXT_EN\" TEXT," + // 6: context_en
                "\"IS_HOT\" INTEGER NOT NULL );"); // 7: isHot
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMIND_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemindBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String title_en = entity.getTitle_en();
        if (title_en != null) {
            stmt.bindString(3, title_en);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(6, context);
        }
 
        String context_en = entity.getContext_en();
        if (context_en != null) {
            stmt.bindString(7, context_en);
        }
        stmt.bindLong(8, entity.getIsHot() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemindBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String title_en = entity.getTitle_en();
        if (title_en != null) {
            stmt.bindString(3, title_en);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(5, from);
        }
 
        String context = entity.getContext();
        if (context != null) {
            stmt.bindString(6, context);
        }
 
        String context_en = entity.getContext_en();
        if (context_en != null) {
            stmt.bindString(7, context_en);
        }
        stmt.bindLong(8, entity.getIsHot() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RemindBean readEntity(Cursor cursor, int offset) {
        RemindBean entity = new RemindBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title_en
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // from
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // context
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // context_en
            cursor.getShort(offset + 7) != 0 // isHot
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemindBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle_en(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFrom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContext(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContext_en(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsHot(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemindBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemindBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RemindBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
