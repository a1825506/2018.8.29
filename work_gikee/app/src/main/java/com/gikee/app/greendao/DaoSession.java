package com.gikee.app.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.gikee.app.greendao.TrandBean;
import com.gikee.app.greendao.RemindBean;
import com.gikee.app.greendao.LoginBean;
import com.gikee.app.greendao.UserBean;
import com.gikee.app.greendao.CollectBean;

import com.gikee.app.greendao.TrandBeanDao;
import com.gikee.app.greendao.RemindBeanDao;
import com.gikee.app.greendao.LoginBeanDao;
import com.gikee.app.greendao.UserBeanDao;
import com.gikee.app.greendao.CollectBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig trandBeanDaoConfig;
    private final DaoConfig remindBeanDaoConfig;
    private final DaoConfig loginBeanDaoConfig;
    private final DaoConfig userBeanDaoConfig;
    private final DaoConfig collectBeanDaoConfig;

    private final TrandBeanDao trandBeanDao;
    private final RemindBeanDao remindBeanDao;
    private final LoginBeanDao loginBeanDao;
    private final UserBeanDao userBeanDao;
    private final CollectBeanDao collectBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        trandBeanDaoConfig = daoConfigMap.get(TrandBeanDao.class).clone();
        trandBeanDaoConfig.initIdentityScope(type);

        remindBeanDaoConfig = daoConfigMap.get(RemindBeanDao.class).clone();
        remindBeanDaoConfig.initIdentityScope(type);

        loginBeanDaoConfig = daoConfigMap.get(LoginBeanDao.class).clone();
        loginBeanDaoConfig.initIdentityScope(type);

        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        collectBeanDaoConfig = daoConfigMap.get(CollectBeanDao.class).clone();
        collectBeanDaoConfig.initIdentityScope(type);

        trandBeanDao = new TrandBeanDao(trandBeanDaoConfig, this);
        remindBeanDao = new RemindBeanDao(remindBeanDaoConfig, this);
        loginBeanDao = new LoginBeanDao(loginBeanDaoConfig, this);
        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);
        collectBeanDao = new CollectBeanDao(collectBeanDaoConfig, this);

        registerDao(TrandBean.class, trandBeanDao);
        registerDao(RemindBean.class, remindBeanDao);
        registerDao(LoginBean.class, loginBeanDao);
        registerDao(UserBean.class, userBeanDao);
        registerDao(CollectBean.class, collectBeanDao);
    }
    
    public void clear() {
        trandBeanDaoConfig.clearIdentityScope();
        remindBeanDaoConfig.clearIdentityScope();
        loginBeanDaoConfig.clearIdentityScope();
        userBeanDaoConfig.clearIdentityScope();
        collectBeanDaoConfig.clearIdentityScope();
    }

    public TrandBeanDao getTrandBeanDao() {
        return trandBeanDao;
    }

    public RemindBeanDao getRemindBeanDao() {
        return remindBeanDao;
    }

    public LoginBeanDao getLoginBeanDao() {
        return loginBeanDao;
    }

    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
    }

    public CollectBeanDao getCollectBeanDao() {
        return collectBeanDao;
    }

}
