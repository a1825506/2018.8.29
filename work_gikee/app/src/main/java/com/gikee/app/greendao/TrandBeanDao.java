package com.gikee.app.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRAND_BEAN".
*/
public class TrandBeanDao extends AbstractDao<TrandBean, Long> {

    public static final String TABLENAME = "TRAND_BEAN";

    /**
     * Properties of entity TrandBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Symbol = new Property(1, String.class, "symbol", false, "SYMBOL");
        public final static Property Trandname = new Property(2, String.class, "trandname", false, "TRANDNAME");
        public final static Property Trandname_en = new Property(3, String.class, "trandname_en", false, "TRANDNAME_EN");
        public final static Property Trandid = new Property(4, String.class, "trandid", false, "TRANDID");
        public final static Property Trandnum = new Property(5, Integer.class, "trandnum", false, "TRANDNUM");
        public final static Property Iscollect = new Property(6, boolean.class, "iscollect", false, "ISCOLLECT");
    }


    public TrandBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TrandBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRAND_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SYMBOL\" TEXT," + // 1: symbol
                "\"TRANDNAME\" TEXT," + // 2: trandname
                "\"TRANDNAME_EN\" TEXT," + // 3: trandname_en
                "\"TRANDID\" TEXT," + // 4: trandid
                "\"TRANDNUM\" INTEGER," + // 5: trandnum
                "\"ISCOLLECT\" INTEGER NOT NULL );"); // 6: iscollect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRAND_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrandBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(2, symbol);
        }
 
        String trandname = entity.getTrandname();
        if (trandname != null) {
            stmt.bindString(3, trandname);
        }
 
        String trandname_en = entity.getTrandname_en();
        if (trandname_en != null) {
            stmt.bindString(4, trandname_en);
        }
 
        String trandid = entity.getTrandid();
        if (trandid != null) {
            stmt.bindString(5, trandid);
        }
 
        Integer trandnum = entity.getTrandnum();
        if (trandnum != null) {
            stmt.bindLong(6, trandnum);
        }
        stmt.bindLong(7, entity.getIscollect() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrandBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(2, symbol);
        }
 
        String trandname = entity.getTrandname();
        if (trandname != null) {
            stmt.bindString(3, trandname);
        }
 
        String trandname_en = entity.getTrandname_en();
        if (trandname_en != null) {
            stmt.bindString(4, trandname_en);
        }
 
        String trandid = entity.getTrandid();
        if (trandid != null) {
            stmt.bindString(5, trandid);
        }
 
        Integer trandnum = entity.getTrandnum();
        if (trandnum != null) {
            stmt.bindLong(6, trandnum);
        }
        stmt.bindLong(7, entity.getIscollect() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrandBean readEntity(Cursor cursor, int offset) {
        TrandBean entity = new TrandBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // symbol
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trandname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // trandname_en
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // trandid
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // trandnum
            cursor.getShort(offset + 6) != 0 // iscollect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrandBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSymbol(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrandname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTrandname_en(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTrandid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTrandnum(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIscollect(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrandBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrandBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrandBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
